Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: DBT

; Microsoft Dynamics AX Table : TSTMainTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TSTMainTable
    EnforceFKRelation 1
    PROPERTIES
      Name                #TSTMainTable
      Label               #Cadastro de principais financiadores
      CreateRecIdIndex    #Yes
      TableGroup          #Main
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      Origin              #{322F60FF-E5D9-4CC5-A397-210242B78D6B}
    ENDPROPERTIES
    
    FIELDS
      FIELD #AccountNum
        STRING
        PROPERTIES
          Name                #AccountNum
          Table               #TSTMainTable
          Origin              #{1EE4F8B7-AD7F-40BF-91F0-4E1CF2C9DDC8}
          ExtendedDataType    #AccountNum
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Table               #TSTMainTable
          Origin              #{DF86D1DE-A463-405B-99F6-269E8C341C9E}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #NameAlias
        STRING
        PROPERTIES
          Name                #NameAlias
          Table               #TSTMainTable
          Origin              #{A2B709A8-E37D-4652-8CDD-57ABAF7D92AC}
          ExtendedDataType    #NameAlias
          StringSize          #20
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #Name
          #NameAlias
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #Index1
      PROPERTIES
        Name                #Index1
        Origin              #{31B70D7B-9FE8-4CA8-B412-C0C66C493330}
      ENDPROPERTIES
      
      INDEXFIELDS
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #TSTTransactionTable
        PROPERTIES
          Name                #TSTTransactionTable
          Table               #TSTTransactionTable
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE NORMAL
          PROPERTIES
            Field               #AccountNum
            RelatedField        #AccountNum
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : TSTSimpleListTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TSTSimpleListTable
    EnforceFKRelation 1
    PROPERTIES
      Name                #TSTSimpleListTable
      Label               #Cadastro de principais financiadores
      TitleField1         #AccountNum
      TitleField2         #Name
      CreateRecIdIndex    #Yes
      TableGroup          #Transaction
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      Origin              #{3FFF55A3-2F02-435F-80B1-D0D6A3720956}
    ENDPROPERTIES
    
    FIELDS
      FIELD #AccountNum
        STRING
        PROPERTIES
          Name                #AccountNum
          Table               #TSTSimpleListTable
          Origin              #{1CAAAD76-E606-4299-B23A-DC58E9ADD273}
          ExtendedDataType    #AccountNum
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #InvoiceId
        STRING
        PROPERTIES
          Name                #InvoiceId
          Table               #TSTSimpleListTable
          Origin              #{4AF13EF7-317D-4A0D-A690-BBDFFB3C60C1}
          ExtendedDataType    #InvoiceId
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #Name
        STRING
        PROPERTIES
          Name                #Name
          Table               #TSTSimpleListTable
          Origin              #{1EBBC843-C6C0-42FE-950C-E9FCD8BB470B}
          ExtendedDataType    #Name
          StringSize          #60
        ENDPROPERTIES
        
      FIELD #NameAlias
        STRING
        PROPERTIES
          Name                #NameAlias
          Table               #TSTSimpleListTable
          Origin              #{0B9281A6-9F4B-4B07-87CE-02518C09F76D}
          ExtendedDataType    #NameAlias
          StringSize          #20
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #Name
          #NameAlias
          #InvoiceId
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : TSTTransactionTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TSTTransactionTable
    EnforceFKRelation 1
    PROPERTIES
      Name                #TSTTransactionTable
      Label               #Cadastro de principais financiadores
      TitleField1         #AccountNum
      CreateRecIdIndex    #Yes
      TableGroup          #Transaction
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      Origin              #{F541E400-5D8F-4C7C-9704-257E32695C68}
    ENDPROPERTIES
    
    FIELDS
      FIELD #AccountNum
        STRING
        PROPERTIES
          Name                #AccountNum
          Table               #TSTTransactionTable
          Origin              #{9DA5EBC9-1692-4E4C-9A43-C04906003C78}
          ExtendedDataType    #AccountNum
          StringSize          #20
        ENDPROPERTIES
        
      FIELD #AmountCur
        REAL
        PROPERTIES
          Name                #AmountCur
          Table               #TSTTransactionTable
          Origin              #{0C2D6252-8CD3-45BC-8033-9FEEF64FD908}
          ExtendedDataType    #AmountCur
        ENDPROPERTIES
        
      FIELD #InvoiceId
        STRING
        PROPERTIES
          Name                #InvoiceId
          Table               #TSTTransactionTable
          Origin              #{D167DC50-AF90-48BC-95C0-9BEADCD57483}
          ExtendedDataType    #InvoiceId
          StringSize          #20
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoLookup
        PROPERTIES
          Name                #AutoLookup
        ENDPROPERTIES
        
        GROUPFIELDS
          #AccountNum
          #InvoiceId
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : TSTTableOfContentTable unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #TSTTableOfContentTable
    EnforceFKRelation 1
    PROPERTIES
      Name                #TSTTableOfContentTable
      Label               #Uma tabela de teste que simula uma de parametro
      TitleField1         #BOLcarrierName
      TitleField2         #BOLfreightChargeTerms
      CreateRecIdIndex    #Yes
      TableGroup          #Parameter
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      Origin              #{2458302B-BABC-4115-829F-866FFB254C0B}
    ENDPROPERTIES
    
    FIELDS
      FIELD #BOLcarrierName
        STRING
        PROPERTIES
          Name                #BOLcarrierName
          Table               #TSTTableOfContentTable
          IgnoreEDTRelation   #Yes
          Origin              #{68A183EB-705B-4A81-9C54-B9B9AEDB0E45}
          ExtendedDataType    #WMSCarrierName
          StringSize          #140
        ENDPROPERTIES
        
      FIELD #BOLfreightChargeTerms
        ENUM
        PROPERTIES
          Name                #BOLfreightChargeTerms
          Table               #TSTTableOfContentTable
          Origin              #{C7A16811-8706-4E7C-B82F-7E25A036A31F}
          EnumType            #WMSFreightChargeTerms
        ENDPROPERTIES
        
      FIELD #BOLfreightCounted
        ENUM
        PROPERTIES
          Name                #BOLfreightCounted
          Table               #TSTTableOfContentTable
          Origin              #{7A9F4CA7-8F9D-47D9-A1F9-A6FA92E3E33C}
          EnumType            #WMSFreightCounted
        ENDPROPERTIES
        
      FIELD #BOLFreightedBy
        ENUM
        PROPERTIES
          Name                #BOLFreightedBy
          Table               #TSTTableOfContentTable
          Origin              #{4D94A788-45DE-4159-907C-CF55CCF649DC}
          EnumType            #WMSFreightedBy
        ENDPROPERTIES
        
      FIELD #BOLlanguageId
        STRING
        PROPERTIES
          Name                #BOLlanguageId
          ConfigurationKey    #SalesShipments
          Table               #TSTTableOfContentTable
          IgnoreEDTRelation   #Yes
          Origin              #{2F4F92CA-9123-42E8-BB6D-ECFE5C9B7E4B}
          ExtendedDataType    #LanguageId
          StringSize          #7
        ENDPROPERTIES
        
      FIELD #BOLtrailerLoaded
        ENUM
        PROPERTIES
          Name                #BOLtrailerLoaded
          Table               #TSTTableOfContentTable
          Origin              #{FF9C3EF4-9952-4602-8049-C067CF63EFF5}
          EnumType            #WMSTrailerLoaded
        ENDPROPERTIES
        
      FIELD #Key
        INT
        PROPERTIES
          Name                #Key
          AllowEditOnCreate   #No
          AllowEdit           #No
          Visible             #No
          Table               #TSTTableOfContentTable
          Origin              #{AEE9DD0E-A655-4662-BDDC-3CE425887750}
          ExtendedDataType    #ParametersKey
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate
    PROPERTIES
      Name                #DAXDTable2FormCreate
      Origin              #{F143CEAB-043B-4C6C-B693-D3F55FB4F605}
    ENDPROPERTIES
    
    METHODS
      SOURCE #setTabControl
        #/// <summary>
        #/// Add AutoIdentification table group to tab general
        #/// </summary>
        #/// <remarks>
        #/// At the moment, this function isn't working 'cause the lack of knowledge of
        #/// how to insert a group control to a table via X++
        #/// </remarks>
        #public void setTabControl()
        #{
        #    //throw error(error::missingOverride(funcName()));
        #}
      ENDSOURCE
      SOURCE #hasTabGeneral
        #private boolean hasTabGeneral()
        #{
        #    boolean ret = false;
        #    ;
        #
        #    switch (this.parmFormTranslation().parmFormStyle())
        #    {
        #        case FormStyle::DetailsFormMaster:      // HeaderGeneral
        #        case FormStyle::SimpleListDetails:      // TabPage
        #        case FormStyle::TableOfContents:        // TOCPage1
        #        case FormStyle::DetailsFormTransaction: // HeaderGeneral
        #            ret = true;
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #setControls
        #private void setControls()
        #{
        #    ;
        #
        #    if (this.hasGrid())
        #    {
        #        this.setGrid();
        #    }
        #
        #    if (this.hasTabGeneral())
        #    {
        #        this.setGrid();
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #abstract class DAXDTable2FormCreate
        #{
        #    DAXDTable2FormTranslation formTransLation;
        #
        #    TreeNode nodeNewForm;
        #}
      ENDSOURCE
      SOURCE #create
        #public void create()
        #{
        #    this.createForm();
        #    this.setDataSources();
        #    this.setDesign();
        #    this.setControls();
        #    this.createMenuItem();
        #    this.createOtherForms();
        #    this.openNewForm();
        #}
      ENDSOURCE
      SOURCE #createForm
        #public void createForm()
        #{
        #    TreeNode nodeDefaultBPnode = DAXDTable2FormUtil::getDefaultStyleFormNode(this.parmFormTranslation().parmFormStyle());
        #    ;
        #
        #    if (nodeDefaultBPnode)
        #    {
        #        nodeNewForm = nodeDefaultBPnode.AOTDuplicate();
        #        nodeNewForm.AOTRename(this.parmFormTranslation().parmFormName());
        #    }
        #    else
        #    {
        #        nodeNewForm = DAXDTable2FormUtil::createAutoForm(this.parmFormTranslation().parmFormName());
        #    }
        #
        #    nodeNewForm.AOTsave();
        #    nodeNewForm.AOTrestore();
        #    nodeNewForm.AOTcompile();
        #}
      ENDSOURCE
      SOURCE #createMenuItem
        #protected void createMenuItem()
        #{
        #    TreeNode node = DAXDTable2FormUtil::getMenuItemDisplayNode();
        #    TreeNode nodeMenuItemDisplay;
        #    ;
        #
        #    nodeMenuItemDisplay = node.AOTadd(this.parmFormTranslation().parmFormName());
        #    nodeMenuItemDisplay.AOTsetProperty("ObjectType", "Form");
        #    nodeMenuItemDisplay.AOTsetProperty("Object", this.parmFormTranslation().parmFormName());
        #    nodeMenuItemDisplay.AOTsetProperty("Label", this.parmFormTranslation().parmFormLabel());
        #
        #    nodeMenuItemDisplay.AOTsave();
        #    nodeMenuItemDisplay.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #createOtherForms
        #protected void createOtherForms()
        #{
        #}
      ENDSOURCE
      SOURCE #hasGrid
        #private boolean hasGrid()
        #{
        #    boolean ret = false;
        #    ;
        #
        #    switch (this.parmFormTranslation().parmFormStyle())
        #    {
        #        case FormStyle::DetailsFormMaster:
        #        case FormStyle::DetailsFormTransaction:
        #        case FormStyle::ListPage:
        #        case FormStyle::SimpleList:
        #        case FormStyle::SimpleListDetails:
        #            ret = true;
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #openNewForm
        #public void openNewForm()
        #{
        #    ;
        #
        #    nodeNewForm.AOTsave();
        #    nodeNewForm.AOTrestore();
        #    nodeNewForm.AOTnewWindow();
        #}
      ENDSOURCE
      SOURCE #parmFormTranslation
        #protected DAXDTable2FormTranslation parmFormTranslation(DAXDTable2FormTranslation _formTranslation = formTranslation)
        #{
        #    formTranslation = _formTranslation;
        #
        #    return formTranslation;
        #}
      ENDSOURCE
      SOURCE #setDataSources
        #public void setDataSources()
        #{
        #    TreeNode    node = DAXDTable2FormUtil::getFormDataSourceNode(this.parmFormTranslation().parmFormName());
        #    TreeNode    nodeDataSource
        #    ;
        #
        #    nodeDataSource = node.AOTadd(this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("Name", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("Table", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsave();
        #}
      ENDSOURCE
      SOURCE #setDesign
        #public void setDesign()
        #{
        #    TreeNode node = DAXDTable2FormUtil::getFormDesignNode(this.parmFormTranslation().parmFormName());
        #    ;
        #
        #    node.AOTsetProperty("Caption", this.parmFormTranslation().parmFormLabel());
        #    node.AOTsetProperty("TitleDataSource", this.parmFormTranslation().parmTableName());
        #}
      ENDSOURCE
      SOURCE #setGrid
        #public void setGrid()
        #{
        #    throw error(error::missingOverride(funcName()));
        #}
      ENDSOURCE
      SOURCE #construct
        #public static DAXDTable2FormCreate construct(DAXDTable2FormTranslation _formTranslation)
        #{
        #    DAXDTable2FormCreate obj = DAXDTable2FormUtil::newTable2FormCreate(_formTranslation.parmFormStyle());
        #    ;
        #
        #    obj.parmFormTranslation(_formTranslation);
        #
        #    return obj;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_Auto descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_Auto
    PROPERTIES
      Name                #DAXDTable2FormCreate_Auto
      Extends             #DAXDTable2FormCreate
      Origin              #{662AF1BD-F619-48AC-9216-F5A9CA68EA10}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_Auto extends DAXDTable2FormCreate
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_ListPage descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_ListPage
    PROPERTIES
      Name                #DAXDTable2FormCreate_ListPage
      Extends             #DAXDTable2FormCreate
      Origin              #{F2551365-19C6-49F8-A467-526F858E4639}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_ListPage extends DAXDTable2FormCreate
        #{
        #    TreeNode nodeListPageInteractionClass;
        #    TreeNode nodeListPageInteractionQuery;
        #}
      ENDSOURCE
      SOURCE #create
        #public void create()
        #{
        #    ;
        #    super();
        #
        #    if (this.parmFormTranslation().parmCreateDetailFormMaster())
        #    {
        #        this.hookFormDetail();
        #    }
        #}
      ENDSOURCE
      SOURCE #createForm
        #public void createForm()
        #{
        #    ;
        #
        #    this.createListPageQuery();
        #    //this.createListPageClass();
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #createFormDetail
        #private void createFormDetail()
        #{
        #    DAXDTable2FormTranslation formTranslationDetail = DAXDTable2FormTranslation::construct(this.parmFormTranslation().parmTableName());
        #    DAXDTable2FormCreate formDetailCreate;
        #    ;
        #
        #    formTranslationDetail.parmFormLabel            (this.parmFormTranslation().parmFormLabelDetail());
        #    formTranslationDetail.parmFormName             (this.parmFormTranslation().parmFormNameDetail());
        #    formTranslationDetail.parmFormStyle            (this.parmFormTranslation().parmFormStyleDetail());
        #    formTranslationDetail.parmTableTransactionName (this.parmFormTranslation().parmTableTransactionName());
        #
        #    formDetailCreate = DAXDTable2FormCreate::construct(formTranslationDetail);
        #    formDetailCreate.create();
        #}
      ENDSOURCE
      SOURCE #createListPageClass
        #private void createListPageClass()
        #{
        #    #AOT
        #
        #    xppSource xppSource = new xppSource();
        #    str classDeclarationSource;
        #
        #    TreeNode  node = TreeNode::findNode(#ClassesPath);
        #    ;
        #
        #    nodeListPageInteractionClass = node.AOTadd(strFmt("%1ListPageInteraction",this.parmFormTranslation().parmFormName()));
        #    nodeListPageInteractionClass.AOTsave();
        #
        #    node = DAXDTable2FormUtil::getClassDeclarationNode(nodeListPageInteractionClass.AOTname());
        #
        #    classDeclarationSource += strFmt("public class %1 extends ListPageInteraction", nodeListPageInteractionClass.AOTname());
        #    classDeclarationSource += "\n";
        #    classDeclarationSource += xppSource.block();
        #
        #    node.AOTsetSource(classDeclarationSource);
        #    node.AOTsave();
        #    node.AOTcompile();
        #}
      ENDSOURCE
      SOURCE #createListPageQuery
        #private void createListPageQuery()
        #{
        #    #AOT
        #
        #    xppSource xppSource = new xppSource();
        #    str classDeclarationSource;
        #
        #    TreeNode  node = TreeNode::findNode(#QueriesPath);
        #    TreeNode  nodeDataSource;
        #    TreeNode  nodeFields;
        #    ;
        #
        #    nodeListPageInteractionQuery = node.AOTadd(strFmt("%1ListPage",this.parmFormTranslation().parmFormName()));
        #    nodeListPageInteractionQuery.AOTsave();
        #
        #    node = DAXDTable2FormUtil::getQueryDataSourceNode(nodeListPageInteractionQuery.AOTname());
        #
        #    nodeDataSource = node.AOTadd(this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("Name", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("Table", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsave();
        #
        #    nodeFields = DAXDTable2FormUtil::getQueryFieldsNode(nodeListPageInteractionQuery.AOTname(),
        #                                                        this.parmFormTranslation().parmTableName());
        #    nodeFields.AOTsetProperty("Dynamic", "Yes");
        #    nodeFields.AOTsave();
        #
        #    nodeListPageInteractionQuery.AOTsave();
        #}
      ENDSOURCE
      SOURCE #createOtherForms
        #protected void createOtherForms()
        #{
        #    ;
        #
        #    if (this.parmFormTranslation().parmCreateDetailFormMaster())
        #    {
        #        this.createFormDetail();
        #    }
        #}
      ENDSOURCE
      SOURCE #hookFormDetail
        #private void hookFormDetail()
        #{
        #    TreeNode node;
        #    ;
        #
        #    if (DAXDTable2FormUtil::getMenuItemDisplayNode(this.parmFormTranslation().parmFormNameDetail()))
        #    {
        #        node = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(), "EditButton");
        #
        #        if (node)
        #        {
        #            node.AOTsetProperty("MenuItemName", this.parmFormTranslation().parmFormNameDetail());
        #        }
        #
        #        node = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(), "EditGridButton");
        #
        #        if (node)
        #        {
        #            node.AOTsetProperty("MenuItemName", this.parmFormTranslation().parmFormNameDetail());
        #        }
        #
        #        node = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(), "ViewButton");
        #
        #        if (node)
        #        {
        #            node.AOTsetProperty("MenuItemName", this.parmFormTranslation().parmFormNameDetail());
        #        }
        #
        #        node = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(), "NewButton");
        #
        #        if (node)
        #        {
        #            node.AOTsetProperty("MenuItemName", this.parmFormTranslation().parmFormNameDetail());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setDataSources
        #public void setDataSources()
        #{
        #    TreeNode nodeDataSource;
        #    ;
        #
        #    //nodeNewForm.AOTsetProperty("InteractionClass", nodeListPageInteractionClass.AOTname());
        #    //nodeNewForm.AOTsetProperty("InteractionClass", "ListPageInteraction");
        #    //nodeNewForm.AOTsave();
        #
        #    nodeDataSource = DAXDTable2FormUtil::getFormDataSourceNode(nodeNewForm.AOTname());
        #    nodeDataSource.AOTsetProperty("Query", nodeListPageInteractionQuery.AOTname());
        #
        #    nodeNewForm.AOTsave();
        #}
      ENDSOURCE
      SOURCE #setGrid
        #public void setGrid()
        #{
        #    TreeNode nodeGrid;
        #    TreeNode nodeGridColumn;
        #
        #    DictFieldGroup dictFieldGroup;
        #
        #    int i;
        #    ;
        #
        #    nodeGrid = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(),
        #                                                   "ListPageGrid");
        #
        #    nodeGrid.AOTsetProperty("DataSource", this.parmFormTranslation().parmTableName());
        #    nodeGrid.AOTsetProperty("DataGroup", "AutoLookup");
        #
        #
        #    /*
        #    dictFieldGroup = new DictFieldGroup(this.parmFormTranslation().getTableId(),
        #                                        "AutoLookup");
        #
        #    for (i = 1; i <= dictFieldGroup.numberOfFields(); i++)
        #    {
        #        nodeGridColumn = nodeGrid.AOTadd(strFmt("%1_%2", this.parmFormTranslation().getTableName(),
        #                                                          fieldId2name(this.parmFormTranslation().getTableId(), dictFieldGroup.field(i))));
        #
        #        nodeGridColumn.AOTsetProperty("DataSource", this.parmFormTranslation().getTableName());
        #        nodeGridColumn.AOTsetProperty("DataField", fieldId2name(this.parmFormTranslation().getTableId(), dictFieldGroup.field(i)));
        #    }
        #
        #    nodeGridColumn.AOTsave();
        #    */
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_DetailsFormMaster descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_DetailsFormMaster
    PROPERTIES
      Name                #DAXDTable2FormCreate_DetailsFormMaster
      Extends             #DAXDTable2FormCreate
      Origin              #{751453CE-3040-441E-8B61-DE129EBDB17B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_DetailsFormMaster extends DAXDTable2FormCreate
        #{
        #}
      ENDSOURCE
      SOURCE #setGrid
        #public void setGrid()
        #{
        #    TreeNode nodeGrid;
        #    TreeNode nodeGridColumn;
        #
        #    DictFieldGroup dictFieldGroup;
        #
        #    int i;
        #    ;
        #
        #    nodeGrid = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(),
        #                                                   "HeaderGrid");
        #
        #    nodeGrid.AOTsetProperty("DataSource", this.parmFormTranslation().parmTableName());
        #    nodeGrid.AOTsetProperty("DataGroup", "AutoLookup");
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_DetailsFormTransact descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_DetailsFormTransact
    PROPERTIES
      Name                #DAXDTable2FormCreate_DetailsFormTransact
      Extends             #DAXDTable2FormCreate
      Origin              #{592414DF-AF16-4676-BFFB-65A01BE4A08A}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_DetailsFormTransact extends DAXDTable2FormCreate
        #{
        #    TreeNode nodeListPageInteractionClass;
        #    TreeNode nodeListPageInteractionQuery;
        #}
      ENDSOURCE
      SOURCE #create
        #public void create()
        #{
        #    ;
        #    super();
        #
        #    if (this.parmFormTranslation().parmCreateDetailFormMaster())
        #    {
        #        this.hookFormDetail();
        #    }
        #}
      ENDSOURCE
      SOURCE #createFormDetail
        #private void createFormDetail()
        #{
        #    DAXDTable2FormTranslation formTranslationDetail = DAXDTable2FormTranslation::construct(this.parmFormTranslation().parmTableName());
        #    DAXDTable2FormCreate formDetailCreate;
        #    ;
        #
        #    formTranslationDetail.parmFormLabel (this.parmFormTranslation().parmFormLabelDetail());
        #    formTranslationDetail.parmFormName  (this.parmFormTranslation().parmFormNameDetail());
        #    formTranslationDetail.parmFormStyle (this.parmFormTranslation().parmFormStyleDetail());
        #
        #    formDetailCreate = DAXDTable2FormCreate::construct(formTranslationDetail);
        #    formDetailCreate.create();
        #}
      ENDSOURCE
      SOURCE #createListPageClass
        #private void createListPageClass()
        #{
        #    #AOT
        #
        #    xppSource xppSource = new xppSource();
        #    str classDeclarationSource;
        #
        #    TreeNode  node = TreeNode::findNode(#ClassesPath);
        #    ;
        #
        #    nodeListPageInteractionClass = node.AOTadd(strFmt("%1ListPageInteraction",this.parmFormTranslation().parmFormName()));
        #    nodeListPageInteractionClass.AOTsave();
        #
        #    node = DAXDTable2FormUtil::getClassDeclarationNode(nodeListPageInteractionClass.AOTname());
        #
        #    classDeclarationSource += strFmt("public class %1 extends ListPageInteraction", nodeListPageInteractionClass.AOTname());
        #    classDeclarationSource += "\n";
        #    classDeclarationSource += xppSource.block();
        #
        #    node.AOTsetSource(classDeclarationSource);
        #    node.AOTsave();
        #    node.AOTcompile();
        #}
      ENDSOURCE
      SOURCE #createListPageQuery
        #private void createListPageQuery()
        #{
        #    #AOT
        #
        #    xppSource xppSource = new xppSource();
        #    str classDeclarationSource;
        #
        #    TreeNode  node = TreeNode::findNode(#QueriesPath);
        #    TreeNode  nodeDataSource;
        #    TreeNode  nodeFields;
        #    ;
        #
        #    nodeListPageInteractionQuery = node.AOTadd(strFmt("%1ListPage",this.parmFormTranslation().parmFormName()));
        #    nodeListPageInteractionQuery.AOTsave();
        #
        #    node = DAXDTable2FormUtil::getQueryDataSourceNode(nodeListPageInteractionQuery.AOTname());
        #
        #    nodeDataSource = node.AOTadd(this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("Name", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("Table", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsave();
        #
        #    nodeFields = DAXDTable2FormUtil::getQueryFieldsNode(nodeListPageInteractionQuery.AOTname(),
        #                                                        this.parmFormTranslation().parmTableName());
        #    nodeFields.AOTsetProperty("Dynamic", "Yes");
        #    nodeFields.AOTsave();
        #
        #    nodeListPageInteractionQuery.AOTsave();
        #}
      ENDSOURCE
      SOURCE #createOtherForms
        #protected void createOtherForms()
        #{
        #    ;
        #
        #    if (this.parmFormTranslation().parmCreateDetailFormMaster())
        #    {
        #        this.createFormDetail();
        #    }
        #}
      ENDSOURCE
      SOURCE #hookFormDetail
        #private void hookFormDetail()
        #{
        #    TreeNode node;
        #    ;
        #
        #    if (DAXDTable2FormUtil::getMenuItemDisplayNode(this.parmFormTranslation().parmFormNameDetail()))
        #    {
        #        node = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(), "EditButton");
        #
        #        if (node)
        #        {
        #            node.AOTsetProperty("MenuItemName", this.parmFormTranslation().parmFormNameDetail());
        #        }
        #
        #        node = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(), "ViewButton");
        #
        #        if (node)
        #        {
        #            node.AOTsetProperty("MenuItemName", this.parmFormTranslation().parmFormNameDetail());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #setDataSources
        #public void setDataSources()
        #{
        #    TreeNode    node = DAXDTable2FormUtil::getFormDataSourceNode(this.parmFormTranslation().parmFormName());
        #    TreeNode    nodeDataSource
        #    ;
        #
        #    super();
        #
        #    nodeDataSource = node.AOTadd(this.parmFormTranslation().parmTableTransactionName());
        #    nodeDataSource.AOTsetProperty("Name", this.parmFormTranslation().parmTableTransactionName());
        #    nodeDataSource.AOTsetProperty("Table", this.parmFormTranslation().parmTableTransactionName());
        #    nodeDataSource.AOTsetProperty("JoinSource", this.parmFormTranslation().parmTableName());
        #    nodeDataSource.AOTsetProperty("LinkType", "Delayed");
        #    nodeDataSource.AOTsave();
        #}
      ENDSOURCE
      SOURCE #setGrid
        #public void setGrid()
        #{
        #    TreeNode nodeGrid;
        #    TreeNode nodeGridColumn;
        #
        #    DictFieldGroup dictFieldGroup;
        #
        #    int i;
        #    ;
        #
        #    // Set header grid
        #    nodeGrid = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(),
        #                                                   "HeaderGrid");
        #
        #    nodeGrid.AOTsetProperty("DataSource", this.parmFormTranslation().parmTableName());
        #    nodeGrid.AOTsetProperty("DataGroup", "AutoLookup");
        #    nodeGrid.AOTsave();
        #
        #    // Set line grid
        #    nodeGrid = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmFormName(),
        #                                                   "LinesGrid");
        #
        #    nodeGrid.AOTsetProperty("DataSource", this.parmFormTranslation().parmTableTransactionName());
        #    nodeGrid.AOTsetProperty("DataGroup", "AutoLookup");
        #    nodeGrid.AOTsave();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_SimpleList descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_SimpleList
    PROPERTIES
      Name                #DAXDTable2FormCreate_SimpleList
      Extends             #DAXDTable2FormCreate
      Origin              #{F484755C-E9A9-4160-B653-FAE5A153385B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_SimpleList extends DAXDTable2FormCreate
        #{
        #}
      ENDSOURCE
      SOURCE #setGrid
        #public void setGrid()
        #{
        #    TreeNode nodeGrid;
        #    TreeNode nodeGridColumn;
        #
        #    DictFieldGroup dictFieldGroup;
        #
        #    int i;
        #    ;
        #
        #    nodeGrid = DAXDTable2FormUtil::getFormControlNode(this.parmFormTranslation().parmTableName(),
        #                                                   "Grid");
        #
        #    nodeGrid.AOTsetProperty("DataSource", this.parmFormTranslation().parmTableName());
        #    nodeGrid.AOTsetProperty("DataGroup", "AutoLookup");
        #
        #    nodeGrid.AOTsave();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_SimpleListDetails descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_SimpleListDetails
    PROPERTIES
      Name                #DAXDTable2FormCreate_SimpleListDetails
      Extends             #DAXDTable2FormCreate
      Origin              #{AB8179FE-A8CD-4CC2-BDD0-2CF557116624}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_SimpleListDetails extends DAXDTable2FormCreate
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormCreate_TableOfContent descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormCreate_TableOfContent
    PROPERTIES
      Name                #DAXDTable2FormCreate_TableOfContent
      Extends             #DAXDTable2FormCreate
      Origin              #{933ED307-AC46-4F67-8C03-61E9DB258199}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormCreate_TableOfContent extends DAXDTable2FormCreate
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormUtil descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormUtil
    PROPERTIES
      Name                #DAXDTable2FormUtil
      Origin              #{565B43CC-BA02-40BE-966B-00247256D4A4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormUtil
        #{
        #}
      ENDSOURCE
      SOURCE #createAutoForm
        #public static TreeNode createAutoForm(Name _formName)
        #{
        #    #AOT
        #
        #    TreeNode ret;
        #    ;
        #
        #    ret = TreeNode::findNode(#FormsPath);
        #
        #    return ret.AOTadd(_formName);
        #}
      ENDSOURCE
      SOURCE #getClassDeclarationNode
        #public static TreeNode getClassDeclarationNode(Name _className)
        #{
        #    #AOT
        #
        #    str path;
        #    ;
        #
        #    path = strfmt("%1\\%2\\classDeclaration",#ClassesPath, _className);
        #
        #    return TreeNode::findNode(path);
        #}
      ENDSOURCE
      SOURCE #getDefaultStyleFormNode
        #public static TreeNode getDefaultStyleFormNode(FormStyle _formStyle)
        #{
        #    #AOT
        #
        #    TreeNode node;
        #    ;
        #
        #    switch (_formStyle)
        #    {
        #        case FormStyle::Auto:
        #            node = null;
        #            break;
        #
        #        case FormStyle::DetailsFormMaster:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_MasterDetails));
        #            break;
        #
        #        case FormStyle::DetailsFormTransaction:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_TransactionDetails));
        #            break;
        #
        #        case FormStyle::Dialog:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_Dialog));
        #            break;
        #
        #        case FormStyle::DropDialog:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_DropDialog));
        #            break;
        #
        #        case FormStyle::ListPage:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_ListPage));
        #            break;
        #
        #        case FormStyle::SimpleList:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_SimpleList));
        #            break;
        #
        #        case FormStyle::SimpleListDetails:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_SimpleListAndDetails));
        #            break;
        #
        #        case FormStyle::TableOfContents:
        #            node = TreeNode::findNode(#FormsPath + "\\" + formStr(SysBPStyle_TableOfContents));
        #            break;
        #
        #        default:
        #            throw error(error::wrongUseOfFunction(funcName()));
        #
        #    }
        #
        #    return node;
        #}
      ENDSOURCE
      SOURCE #getFormControlNode
        #public static TreeNode getFormControlNode(Name _formName, Name _controlName)
        #{
        #    #AOT
        #
        #    str path;
        #    ;
        #
        #    path = strFmt(#FormControlPath, _formName, _controlName);
        #
        #    return TreeNode::findNode(path);
        #}
      ENDSOURCE
      SOURCE #getFormDataSourceNode
        #public static TreeNode getFormDataSourceNode(Name _formName)
        #{
        #    #AOT
        #
        #    str path;
        #    ;
        #
        #    path = strFmt(#FormDataSourcesPath, _formName);
        #
        #    return TreeNode::findNode(path);
        #}
      ENDSOURCE
      SOURCE #getFormDesignNode
        #public static TreeNode getFormDesignNode(Name _formName)
        #{
        #    #AOT
        #
        #    str path;
        #    ;
        #
        #    path = strFmt(#FormsDesignPath, _formName);
        #
        #    return TreeNode::findNode(path);
        #}
      ENDSOURCE
      SOURCE #getMenuItemDisplayNode
        #public static TreeNode getMenuItemDisplayNode(Name _menuItemDisplayName = "")
        #{
        #    #AOT
        #    ;
        #
        #    if (prmisDefault(_menuItemDisplayName))
        #    {
        #        return TreeNode::findNode(#MenuItemsDisplayPath);
        #    }
        #    else
        #    {
        #        return TreeNode::findNode(strFmt("%1\\%2", #MenuItemsDisplayPath, _menuItemDisplayName));
        #    }
        #}
      ENDSOURCE
      SOURCE #getQueryDataSourceNode
        #public static TreeNode getQueryDataSourceNode(Name _queryName)
        #{
        #    #AOT
        #
        #    str path;
        #    ;
        #
        #    path = strfmt("%1\\%2\\Data Sources",#QueriesPath, _queryName);
        #
        #    return TreeNode::findNode(path);
        #}
      ENDSOURCE
      SOURCE #getQueryFieldsNode
        #public static TreeNode getQueryFieldsNode(Name _queryName, Name _tableName)
        #{
        #    #AOT
        #
        #    str path;
        #    ;
        #
        #    path = strfmt("%1\\%2\\Data Sources\\%3\\Fields",#QueriesPath, _queryName, _tableName);
        #
        #    return TreeNode::findNode(path);
        #}
      ENDSOURCE
      SOURCE #newTable2FormCreate
        #static DAXDTable2FormCreate newTable2FormCreate(FormStyle _formStyle)
        #{
        #    switch (_formStyle)
        #    {
        #        case FormStyle::Auto:
        #            return new DAXDTable2FormCreate_Auto();
        #
        #        case FormStyle::ListPage:
        #            return new DAXDTable2FormCreate_ListPage();
        #
        #        case FormStyle::TableOfContents:
        #            return new DAXDTable2FormCreate_TableOfContent();
        #
        #        case FormStyle::SimpleList:
        #            return new DAXDTable2FormCreate_SimpleList();
        #
        #        case FormStyle::SimpleListDetails:
        #            return new DAXDTable2FormCreate_SimpleListDetails();
        #
        #        case FormStyle::DetailsFormMaster:
        #            return new DAXDTable2FormCreate_DetailsFormMaster();
        #
        #        case FormStyle::DetailsFormTransaction:
        #            return new DAXDTable2FormCreate_DetailsFormTransact();
        #
        #        default:
        #            throw error(strFmt("Form stype %1 has not been yet implemented.", _formStyle));
        #
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormTranslation descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormTranslation
    PROPERTIES
      Name                #DAXDTable2FormTranslation
      Origin              #{798F12AE-8B5E-44BE-9C1B-51A9314AD23C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class DAXDTable2FormTranslation
        #{
        #    SysUtilElementName tableName;
        #    SysUtilElementName tableTransactionName;
        #
        #    DictTable dictTable;
        #
        #    LabelString        formLabel;
        #    SysUtilElementName formName;
        #    FormStyle          formStyle;
        #
        #    LabelString        formDetailLabel;
        #    SysUtilElementName formDetailName;
        #    FormStyle          formDetailStyle;
        #
        #    boolean createDetailFormMaster;
        #    boolean createDetailFormTransaction;
        #}
      ENDSOURCE
      SOURCE #DEL_getTableName
        #public str DEL_getTableName()
        #{
        #    str ret;
        #    ;
        #
        #    ret = dictTable.name();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getFormStyle
        #public FormStyle getFormStyle()
        #{
        #    FormStyle ret;
        #    ;
        #
        #    switch (dictTable.tableGroup())
        #    {
        #        case TableGroup::Framework:
        #            ret = FormStyle::SimpleList;
        #            break;
        #
        #        case TableGroup::Group:
        #            ret = FormStyle::SimpleList;
        #            break;
        #
        #        case TableGroup::Main:
        #            ret = FormStyle::ListPage;
        #            break;
        #
        #        case TableGroup::Miscellaneous:
        #            ret = FormStyle::Auto;
        #            break;
        #
        #        case TableGroup::Parameter:
        #            ret = FormStyle::TableOfContents;
        #            break;
        #
        #        case TableGroup::Reference:
        #            break;
        #
        #        case TableGroup::Transaction:
        #            ret = FormStyle::SimpleList;
        #            break;
        #
        #        case TableGroup::TransactionLine:
        #            break;
        #
        #        case TableGroup::Worksheet:
        #            break;
        #
        #        case TableGroup::WorksheetHeader:
        #            break;
        #
        #        case TableGroup::WorksheetLine:
        #            break;
        #
        #        default:
        #            throw error(error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getTableId
        #public TableId getTableId()
        #{
        #    TableId ret;
        #    ;
        #
        #    ret = dictTable.id();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #init
        #private void init()
        #{
        #    ;
        #
        #    dictTable = new DictTable(tableName2id(this.parmTableName()));
        #
        #    if (this.getFormStyle() == FormStyle::ListPage)
        #    {
        #        this.parmFormName(dictTable.name() + "ListPage");
        #    }
        #    else
        #    {
        #        this.parmFormName(dictTable.name());
        #    }
        #
        #    this.parmFormLabel(dictTable.label());
        #    this.parmFormStyle(this.getFormStyle());
        #}
      ENDSOURCE
      SOURCE #parmCreateDetailFormMaster
        #public boolean parmCreateDetailFormMaster(boolean _createDetailFormMaster = createDetailFormMaster)
        #{
        #    createDetailFormMaster = _createDetailFormMaster;
        #
        #    return createDetailFormMaster;
        #}
      ENDSOURCE
      SOURCE #parmCreateDetailFormTransaction
        #public boolean parmCreateDetailFormTransaction(boolean _createDetailFormTransaction = createDetailFormTransaction)
        #{
        #    createDetailFormTransaction = _createDetailFormTransaction;
        #
        #    return createDetailFormTransaction;
        #}
      ENDSOURCE
      SOURCE #parmFormLabel
        #public LabelString parmFormLabel(LabelString _formLabel = formLabel)
        #{
        #    ;
        #
        #    formLabel = _formLabel;
        #
        #    return formLabel;
        #}
      ENDSOURCE
      SOURCE #parmFormLabelDetail
        #public LabelString parmFormLabelDetail(LabelString _formDetailLabel = formDetailLabel)
        #{
        #    ;
        #
        #    formDetailLabel = _formDetailLabel;
        #
        #    return formDetailLabel;
        #}
      ENDSOURCE
      SOURCE #parmFormName
        #public SysUtilElementName parmFormName(SysUtilElementName _formName = formName)
        #{
        #    ;
        #
        #    formName = _formName;
        #
        #    return formName;
        #}
      ENDSOURCE
      SOURCE #parmFormNameDetail
        #public SysUtilElementName parmFormNameDetail(SysUtilElementName _formDetailName = formDetailName)
        #{
        #    ;
        #
        #    formDetailName = _formDetailName;
        #
        #    return formDetailName;
        #}
      ENDSOURCE
      SOURCE #parmFormStyle
        #public FormStyle parmFormStyle(FormStyle _formStyle = formStyle)
        #{
        #    ;
        #
        #    formStyle = _formStyle;
        #
        #    return formStyle;
        #}
      ENDSOURCE
      SOURCE #parmFormStyleDetail
        #public FormStyle parmFormStyleDetail(FormStyle _formDetailStyle = formDetailStyle)
        #{
        #    ;
        #
        #    formDetailStyle = _formDetailStyle;
        #
        #    return formDetailStyle;
        #}
      ENDSOURCE
      SOURCE #parmTableName
        #public SysUtilElementName parmTableName(SysUtilElementName _tableName = tableName)
        #{
        #    tableName = _tableName;
        #
        #    return tableName;
        #}
      ENDSOURCE
      SOURCE #parmTableTransactionName
        #public SysUtilElementName parmTableTransactionName(SysUtilElementName _tableTransactionName = tableTransactionName)
        #{
        #    tableTransactionName = _tableTransactionName;
        #
        #    return tableTransactionName;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static DAXDTable2FormTranslation construct(SysUtilElementName _tableName)
        #{
        #    DAXDTable2FormTranslation obj = new DAXDTable2FormTranslation();
        #    ;
        #
        #    obj.parmTableName(_tableName);
        #    obj.init();
        #
        #    return obj;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: DAXDTable2FormWizard descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DAXDTable2FormWizard
    PROPERTIES
      Name                #DAXDTable2FormWizard
      Extends             #SysWizard
      RunOn               #Client
      Origin              #{E85FDC1E-DFC2-4AFD-95DC-5D2D601C4FE0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #accessMenuFunction
        #public MenuFunction accessMenuFunction()
        #{
        #    return new MenuFunction(menuitemdisplaystr(DAXDTable2FormWizard),MenuItemType::Display);
        #}
      ENDSOURCE
      SOURCE #back
        #public void back()
        #{
        #    ;
        #
        #    super();
        #
        #    switch (this.curTab())
        #    {
        #        case 3:
        #            if (formTranslation.parmFormStyle() != FormStyle::ListPage)
        #            {
        #                this.back();
        #            }
        #            break;
        #
        #        case 4:
        #            if (formTranslation.parmFormStyle() != FormStyle::DetailsFormTransaction &&
        #                formTranslation.parmFormStyleDetail() != FormStyle::DetailsFormTransaction)
        #            {
        #                this.back();
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #public class DAXDTable2FormWizard extends SysWizard
        #{
        #    TableName tableName;
        #
        #    DAXDTable2FormTranslation formTranslation;
        #}
        #
      ENDSOURCE
      SOURCE #curTab
        #public int curTab()
        #{
        #    int ret;
        #
        #    ret = super();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #formName
        #FormName formName()
        #{
        #    return formstr(DAXDTable2FormWizard);
        #}
        #
      ENDSOURCE
      SOURCE #next
        #public void next()
        #{
        #    ;
        #    super();
        #
        #    switch (this.curTab())
        #    {
        #        case 3:
        #            if (formTranslation.parmFormStyle() != FormStyle::ListPage)
        #            {
        #                this.next();
        #            }
        #            break;
        #
        #        case 4:
        #            if (formTranslation.parmFormStyle() != FormStyle::DetailsFormTransaction &&
        #                formTranslation.parmFormStyleDetail() != FormStyle::DetailsFormTransaction)
        #            {
        #                this.next();
        #            }
        #            break;
        #    }
        #}
      ENDSOURCE
      SOURCE #parmFormTranslation
        #public DAXDTable2FormTranslation parmFormTranslation(TableName _tableName)
        #{
        #    ;
        #
        #    if (!formTranslation)
        #    {
        #        formTranslation = DAXDTable2FormTranslation::construct(_tableName);
        #    }
        #
        #    return formTranslation;
        #}
      ENDSOURCE
      SOURCE #parmTableName
        #public TableName parmTableName(TableName _tableName = tableName)
        #{
        #    tableName = _tableName;
        #
        #    return tableName;
        #}
      ENDSOURCE
      SOURCE #run
        #void run()
        #{
        #    DAXDTable2FormCreate formCreate;
        #    ;
        #
        #    if (this.validate())
        #    {
        #        formCreate = DAXDTable2FormCreate::construct(formTranslation);
        #        formCreate.create();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #setupNavigation
        #/*
        #Use this method to setup the two arrays: nextEnabled[] and backEnabled[]
        #Call this.nextEnabled(boolean) and this.backEnabled(boolean) to enable/disable the buttons runtime.
        #*/
        #void setupNavigation()
        #{
        #
        #}
        #
      ENDSOURCE
      SOURCE #validate
        #boolean validate()
        #{
        #    boolean ret = true;
        #    ;
        #
        #    /*
        #    if (formTranslation.parmCreateDetailFormMaster() && formTranslation.parmCreateDetailFormTransaction())
        #    {
        #        ret = checkFailed("Cannot create both detail form master and detail form transaction forms at once.");
        #    }
        #    */
        #
        #    if ((formTranslation.parmFormStyle() == FormStyle::DetailsFormTransaction ||
        #         formTranslation.parmFormStyleDetail() == FormStyle::DetailsFormTransaction) &&
        #         !formTranslation.parmTableTransactionName())
        #    {
        #        ret = checkFailed("In the current setup, the field 'Transaction table name' cannot be blank.");
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #main
        #static void main(args args)
        #{
        #    DAXDTable2FormWizard wizard = new DAXDTable2FormWizard();
        #    TableName            tableName;
        #    SysContextMenu       sysContextMenu;
        #    TreeNode             treeNode;
        #    ;
        #
        #    if (SysContextMenu::startedFrom(args))
        #    {
        #        sysContextMenu  = args.parmObject();
        #        treeNode        = sysContextMenu.first();
        #        if (treeNode)
        #        {
        #            tableName = treeNode.AOTname();
        #            wizard.parmTableName(tableName);
        #            wizard.parmFormTranslation(tableName);
        #        }
        #    }
        #    else
        #    {
        #        throw error(error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    if (wizard.prompt())
        #        wizard.run();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysContextMenu descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      RunOn               #Client
      Origin              #{2D0E03C8-0000-1000-FB09-5DBF82A26477}
      LegacyId            #968
    ENDPROPERTIES
    
    METHODS
      SOURCE #buildMenu
        #/// <summary>
        #///    Builds a pop-up menu for the specified windows handle.
        #/// </summary>
        #/// <param name="windowHdl">
        #///    The windows handle that should contain the context menu.
        #/// </param>
        #/// <param name="_parent">
        #///    The parent pop-up menu, which should contain the menu; optional.
        #/// </param>
        #/// <param name="_itemsPerColumn">
        #///    An integer value that specifies how many items per column; optional.
        #/// </param>
        #/// <param name="_maxColumns">
        #///    An integer value that specifies maximum columns; optional.
        #/// </param>
        #/// <returns>
        #///    A new instance of the <c>PopupMenu</c> class.
        #/// </returns>
        #public PopupMenu buildMenu(int windowHdl, PopupMenu _parent = null, int _itemsPerColumn = maxInt(), int _maxColumns = #defaultMaxCoulmns)
        #{
        #    TreeNode  treeNode;
        #    PopupMenu parent, submenu;
        #    ;
        #
        #    treeNode = TreeNode::findNode(#MenusPath+'\\'+menuStr(sysContextMenu));
        #
        #    if (_parent)
        #    {
        #        parent = _parent;
        #        submenu = new PopupMenu(windowHdl, parent);
        #    }
        #    else
        #    {
        #        parent = new PopupMenu(windowHdl);
        #        submenu = parent;
        #    }
        #    return this.buildSubMenu(treeNode, windowHdl, parent, submenu, _itemsPerColumn, _maxColumns);
        #}
      ENDSOURCE
      SOURCE #buildSubMenu
        #/// <summary>
        #///    Builds a pop-up menu for the specified tree node and windows handle.
        #/// </summary>
        #/// <param name="_treeNode">
        #///    The specified tree node which the pop-up menu is build from.
        #/// </param>
        #/// <param name="windowHdl">
        #///    The specified windows handle.
        #/// </param>
        #/// <param name="parent">
        #///    The parent pop-up menu, which should contain the menu.
        #/// </param>
        #/// <param name="popupMenu">
        #///    The specified popup menu which should contain the sub menu.
        #/// </param>
        #/// <param name="_itemsPerColumn">
        #///    An integer value that specifies how many items per column; optional.
        #/// </param>
        #/// <param name="_maxColumns">
        #///    An integer value that specifies maximum columns; optional.
        #/// </param>
        #/// <returns>
        #///    A new instance of <c>PopupMenu</c> class.
        #/// </returns>
        #public PopupMenu buildSubMenu(TreeNode  _treeNode,
        #                              int       windowHdl,
        #                              PopupMenu parent,
        #                              PopupMenu popupMenu,
        #                              int       _itemsPerColumn = maxInt(),
        #                              int       _maxColumns = #defaultMaxCoulmns)
        #{
        #    #AOT
        #    #define.menuBreakLength     (3)
        #
        #    TreeNode        treeNode = _treeNode.AOTfirstChild();
        #    MenuItem        menuItem;
        #    MenuReference   menuReference;
        #    PopupMenu       subPopupMenu;
        #    TreeNodePath    path;
        #    int             menuCounter;
        #    ;
        #
        #    if (!popupMenu)
        #        popupMenu = new PopupMenu(windowHdl, parent, _itemsPerColumn, _maxColumns );
        #
        #    if (this.selectionCount())
        #    {
        #        while (treeNode)
        #        {
        #            if (subStr(treeNode.treeNodeName(), 1, #menuBreakLength) == '---')
        #                popupMenu.insertBreak();
        #            else
        #            {
        #                switch (treeNode.handle())
        #                {
        #                    case classNum(Menu):
        #                        subPopupMenu = this.buildSubMenu(treeNode, windowHdl, parent, null, _itemsPerColumn, _maxColumns);
        #                        if (subPopupMenu.hits())
        #                            popupMenu.insertPopupMenu(treeNode.treeNodeName(), subPopupMenu);
        #                        break;
        #                    case classNum(MenuReference):
        #                        menuReference = treeNode;
        #                        subPopupMenu = this.buildSubMenu(TreeNode::findNode(#MenusPath).AOTfindChild(menuReference.menuName()),
        #                                                         windowHdl, parent, null, _itemsPerColumn, _maxColumns);
        #                        if (subPopupMenu.hits())
        #                            popupMenu.insertPopupMenu(treeNode.treeNodeName(), subPopupMenu);
        #                        break;
        #                    default :
        #                        menuItem = treeNode;
        #                        infolog.mayReloadMenu(false);
        #                        if (this.verifyItem(menuItem.menuItemName(), menuItem.menuItemType()) == 1)
        #                        {
        #                            menuCounter = popupMenu.insertItem(treeNode.treeNodeName());
        #                            path = treeNode.treeNodePath();
        #                            menuPaths[menuCounter] = path;
        #                        }
        #                        infolog.mayReloadMenu(true);
        #                }
        #            }
        #            treeNode = treeNode.AOTnextSibling();
        #        }
        #    }
        #    return popupMenu;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///    The <c>SysContextMenu</c> class provides an interface to the context menu.
        #/// </summary>
        #/// <remarks>
        #///    This class is abstract.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #abstract public class SysContextMenu
        #{
        #    #AOT
        #    #TreeNodeSysNodeType
        #
        #    #define.defaultMaxCoulmns   (3)
        #    #define.elementTypeSelected (256)
        #
        #    TreeNodePath    menuPaths[];
        #    UtilElementType _firstType;
        #    boolean         aUtilElementTypeSeleced[#elementTypeSelected];
        #    boolean         anyUtilElementTypeSeleced;
        #    TreeNode        firstApplObjectNode;
        #    TreeNode        firstUtilNode;
        #    TreeNode        firstNode;
        #    int             oldMask;
        #
        #    boolean         xRefNamesExistTreeNodeTested;
        #    boolean         xRefNamesExistTreeNode;
        #    boolean         allowEdit;
        #}
      ENDSOURCE
      SOURCE #first
        #/// <summary>
        #///    Retrieves the first tree node object.
        #/// </summary>
        #/// <returns>
        #///    The first tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract TreeNode first()
        #{
        #}
      ENDSOURCE
      SOURCE #getFirstNode
        #/// <summary>
        #///    Retrieves the first tree node, but does not affect the current position.
        #/// </summary>
        #/// <returns>
        #///    The first tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method always returns the first tree node object. But this method does not affect the current
        #///    position. Therefore the fetching action of the <c>next</c> method is not disturbed. This method
        #///    offers better performance than a call to the <c>first</c> method followed by repositioning.
        #/// </remarks>
        #public TreeNode getFirstNode()
        #{
        #    return firstNode;
        #}
        #
        #
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    TreeNode utilNode;
        #    TreeNode treeNode;
        #    TreeNode applObjectNode;
        #
        #    treeNode = this.first();
        #
        #    if (treeNode && treeNode.treeNodeType().isUtilElement())
        #    {
        #        this.setFirstType(treeNode.utilElement().RecordType);
        #    }
        #
        #    while (treeNode)
        #    {
        #        if (!anyUtilElementTypeSeleced) // check if at least one appl object type has been selected, somewhere down the tree
        #        {
        #            applObjectNode = treeNode;
        #            while (applObjectNode.AOTparent()  &&
        #                   !applObjectNode.treeNodeType().isUtilElement())
        #            {
        #                applObjectNode = applObjectNode.AOTparent();
        #            }
        #
        #            if (applObjectNode.treeNodeType().isUtilElement() &&
        #                applObjectNode.utilElement().RecordType != UtilElementType::SharedProject &&
        #                applObjectNode.utilElement().RecordType != UtilElementType::PrivateProject)
        #            {
        #                utilNode = applObjectNode;
        #                applObjectNode = SysTreeNode::getRootElement(applObjectNode);
        #
        #                if (applObjectNode &&
        #                    applObjectNode.treeNodeType().isUtilElement() &&
        #                    applObjectNode.utilElement().RecordType != UtilElementType::SharedProject &&
        #                    applObjectNode.utilElement().RecordType != UtilElementType::PrivateProject)
        #                {
        #                    anyUtilElementTypeSeleced = true;
        #                }
        #            }
        #        }
        #
        #        if (!firstNode && treeNode)
        #        {
        #            firstNode = treeNode;
        #            firstUtilNode = utilNode;
        #            firstApplObjectNode = applObjectNode;
        #            if (firstNode.treeNodeType().isLayerAware())
        #            {
        #                oldMask = firstNode.applObjectOldLayerMask();
        #            }
        #        }
        #
        #        allowEdit = versioncontrol.allowEdit(firstApplObjectNode);
        #
        #        if (treeNode.treeNodeType().id() == #NT_DBTABLE) // condition could be extended to other types that should be look'ed for
        #        {
        #            aUtilElementTypeSeleced[treeNode.utilElement().RecordType + 1] = true;
        #            break;
        #        }
        #        treeNode = this.next();
        #    }
        #}
      ENDSOURCE
      SOURCE #next
        #/// <summary>
        #///    Retrieves the next tree node object.
        #/// </summary>
        #/// <returns>
        #///    The next tree node object.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract TreeNode next()
        #{
        #}
      ENDSOURCE
      SOURCE #runMenu
        #/// <summary>
        #///    Runs the specified context menu.
        #/// </summary>
        #/// <param name="popupMenuChoice">
        #///    The item to select in the context menu.
        #/// </param>
        #/// <param name="_sysContextMenu">
        #///    The context menu to run.
        #/// </param>
        #/// <param name="_caller">
        #///    An object that is used to set the caller of the command; optional.
        #/// </param>
        #/// <param name="_record">
        #///    A buffer to a record; optional.
        #/// </param>
        #/// <returns>
        #///    true, if the menu function is run; otherwise false.
        #/// </returns>
        #/// <remarks>
        #///    false is returned if the specified <paramref name="popupMenuChoice" /> is less than one, or it is
        #///    not in the menu.
        #/// </remarks>
        #public boolean runMenu(int popupMenuChoice, SysContextMenu _sysContextMenu, Object _caller = this, Common _record = null)
        #{
        #    MenuItem     menuItem;
        #    MenuFunction menuFunction;
        #    Args         args = new Args();
        #
        #    if (popupMenuChoice < 1 || !menuPaths[popupMenuChoice])
        #        return false;
        #
        #    menuItem = TreeNode::findNode(menuPaths[popupMenuChoice]);
        #    menuFunction = new MenuFunction(menuItem.menuItemName(), menuItem.menuItemType());
        #
        #    args.parmObject(_sysContextMenu);
        #    args.caller(_caller);
        #    args.record(_record);
        #
        #    menuFunction.run(args);
        #
        #    return true;
        #}
        #
      ENDSOURCE
      SOURCE #selectionCount
        #/// <summary>
        #///    Retrieves the number of items selected in the context menu.
        #/// </summary>
        #/// <returns>
        #///    The count of selected items in the context menu.
        #/// </returns>
        #/// <remarks>
        #///    This method is abstract.
        #/// </remarks>
        #public abstract int selectionCount()
        #{
        #}
      ENDSOURCE
      SOURCE #setFirstType
        #/// <summary>
        #///    Sets the first <c>UtilElementType</c> value in the context menu.
        #/// </summary>
        #/// <param name="t">
        #///    The <c>UtilElementType</c> value to set as first.
        #/// </param>
        #public void setFirstType(UtilElementType t)
        #{
        #;
        #    _firstType = t;
        #}
      ENDSOURCE
      SOURCE #verifyDatasource
        #/// <summary>
        #///    Verifies that the first node in the context menu is among the set of the valid types.
        #/// </summary>
        #/// <returns>
        #///    1 if the first node is among the valid node types; otherwise 0.
        #/// </returns>
        #/// <remarks>
        #///    This method verifies that the first node in the context menu is one of the following types:
        #///    <list type="bullet">
        #///       <item>
        #///          <description>Form data source</description>
        #///       </item>
        #///       <item>
        #///          <description>Query data source</description>
        #///       </item>
        #///       <item>
        #///          <description>System table</description>
        #///       </item>
        #///       <item>
        #///          <description>Table collection</description>
        #///       </item>
        #///    </list>
        #/// </remarks>
        #protected int verifyDatasource()
        #{
        #    #TreeNodeSysNodeType
        #
        #    if ( firstNode.treeNodeType().id() == #SysNodeTypeFormDatasource ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeQueryDatasource ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeSystemTable ||
        #         firstNode.treeNodeType().id() == #SysNodeTypeTableCollection)
        #    {
        #        return 1;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #verifyItem
        #/// <summary>
        #///    Verifies that the command can be displayed in the context menu.
        #/// </summary>
        #/// <param name="menuItemName">
        #///    The name of the command.
        #/// </param>
        #/// <param name="menuItemType">
        #///    The type of the command.
        #/// </param>
        #/// <returns>
        #///    1 if the command can be displayed; otherwise 0.
        #/// </returns>
        #public int verifyItem(identifierName menuItemName, MenuItemType menuItemType)
        #{
        #    #resAppl
        #    #define.pathProjects('<\\\\Projects\\\\')
        #    #define.pathMethods('\\\\Methods>')
        #
        #    boolean         docNode;
        #    UtilEntryLevel  utilEntryLevel;
        #    ClassNode       classNode;
        #    TreeNode        parentNode;
        #    SysTestable     testable;
        #    ListEnumerator  listEnumerator;
        #    int firstNodeTypeId;
        #
        #    if (!firstNode ||
        #        !this.selectionCount())
        #    {
        #        return 0;
        #    }
        #
        #    if (strStartsWith(firstNode.treeNodePath(), #SystemDocPath))
        #    {
        #        docNode = true;
        #    }
        #
        #    firstNodeTypeId = firstNode.treeNodeType().id();
        #
        #    switch (menuItemType)
        #    {
        #
        #        case MenuItemType::Display:
        #            switch (menuItemName)
        #            {
        #                                 // Security Debug Tool:
        #                // Only show SecObjectsInRole on role nodes under /security/roles
        #                //
        #                case menuitemDisplayStr(SysSecObjectsInRole):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::SecRole
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #                //
        #                // Security Debug Tool:
        #                // Only show SecObjectsAnalyze on role nodes under
        #                //
        #                case menuitemDisplayStr(SysSecObjectsAnalyze):
        #                    if ( this.selectionCount() == 1 )
        #                    {
        #                        if (
        #                         _firstType == UtilElementType::ActionTool
        #                         ||
        #                         _firstType == UtilElementType::DisplayTool
        #                         ||
        #                         _firstType == UtilElementType::OutputTool
        #                         ||
        #                         _firstType == UtilElementType::Form
        #                         ||
        #                         _firstType == UtilElementType::WebUrlItem
        #                         ||
        #                         _firstType == UtilElementType::WebActionItem
        #                         ||
        #                         _firstType == UtilElementType::WebManagedContentItem
        #                         ||
        #                         _firstType == UtilElementType::SecDuty
        #                         ||
        #                         _firstType == UtilElementType::SecPrivilege
        #                         ||
        #                         _firstType == UtilElementType::Table
        #                         ||
        #                         _firstType == UtilElementType::InfoPart
        #                         ||
        #                         _firstType == UtilElementType::Report
        #                         ||
        #                         _firstType == UtilElementType::WebControl
        #                         ||
        #                         _firstType == UtilElementType::SecCodePermission
        #                         ||
        #                         firstNodeTypeId == #NT_DBVIEW
        #                         ||
        #                         firstNodeTypeId == #NT_OPERATION
        #                         ||
        #                         firstNodeTypeId == #NT_SSRSREPORTDESIGN
        #                        )
        #                        {
        #                            return 1;
        #                        }
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Xref Analyzer' menu item when the Analyzer form is present
        #                //
        #
        #                case menuitemDisplayStr(SysSecAnalysisAddIn):
        #                    if (this.selectionCount() == 1 &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysis') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Metadata Analyzer' menu item when the Analyzer form is present
        #                //
        #                case menuitemDisplayStr(SysSecAnalysisAddInMetadataAnalyzer):
        #                    if (this.selectionCount() == 1                          &&
        #                        (_firstType==UtilElementType::Form                  ||
        #                         _firstType==UtilElementType::DisplayTool           ||
        #                         _firstType==UtilElementType::OutputTool            ||
        #                         _firstType==UtilElementType::ActionTool            ||
        #                         _firstType==UtilElementType::WebActionItem         ||
        #                         _firstType==UtilElementType::WebUrlItem            ||
        #                         _firstType==UtilElementType::WebDisplayContentItem ||
        #                         _firstType==UtilElementType::WebManagedContentItem ||
        #                         _firstType==UtilElementType::WebOutputContentItem) &&
        #                        TreeNode::findNode(@'\Forms\SysSecAnalysisMetadataAnalyzer') != null)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                //
        #                // Only show 'Reverse Engineer'menu item
        #                // on projects and perspective as we only want to reverse
        #                // engineer project elements
        #                //
        #                case menuitemDisplayStr( SysVisioAddIn ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #
        #                    if (firstNode.treeNodeType().id() == #NT_PERSPECTIVE)    // launch from perspective node
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsedBy):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNodeAnyLayer(this.first()))
        #                        // xRefNames::existTreeNode(this.first(),true))     //only show Used By, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefReferencesUsing):
        #                    if (this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefPaths::find(SysTreeNode::getPath(this.first())))       // only show Using, if anything are used
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(XRefNames):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        xRefNames::existTreeNode(this.first(),false))       // only show Names, if there are anything to show
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTypeHierarchyBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                                //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (SysTypeHierarchy::treenode2Type(firstNode, firstApplObjectNode))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysTableBrowser):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!docNode &&
        #                        _firstType==UtilElementType::Table)
        #                    {
        #                        return 1;
        #                    }
        #                    return this.verifyDatasource();
        #
        #                //<DAXDUtil>
        #                //<DAXD_Table2Form>
        #                case menuitemDisplayStr(DAXDTable2FormWizard):
        #                    if (_firstType==UtilElementType::Table)
        #                    {
        #                        return 1;
        #                    }
        #
        #                    return 0;
        #                //</DAXDUtil>
        #
        #                case menuitemDisplayStr(SysTableForm):
        #                    if (aUtilElementTypeSeleced[UtilElementType::Table + 1] &&
        #                        !firstNode.AOTIsOld()                               //Does not work for old nodes
        #                        )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(SysDictIndexShowDuplicates):
        #                    if (this.selectionCount() != 1 ||
        #                        firstNode.AOTIsOld()                               //Does not work for old nodes
        #                       )
        #                    {
        #                        return 0;
        #                    }
        #                    if (_firstType==UtilElementType::TableIndex)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(AxdWizard):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Query)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardApproval):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowApprovalTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardTask):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTasksPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemDisplayStr(WorkflowAOTWizardType):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodePath() == #WorkflowTypesPath))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysBPStyleCheckAnalysis):
        #                    if ((this.selectionCount() == 1) && (_firstType == UtilElementType::Form))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #                case menuitemDisplayStr(SysLcsIssueSearchAotItem):
        #                    if ((this.selectionCount() == 1) && (firstNode.treeNodeType().isRootElement()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Output:
        #            switch (menuItemName)
        #            {
        #                case menuitemOutputStr( SysXmlDocumentationCreateFile ):
        #                    if ( firstNode.handle() == classNum(ProjectNode) &&     // Only launch from project node
        #                         match(#pathProjects,firstNode.treeNodePath()))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #            }
        #            break;
        #
        #        case MenuItemType::Action:
        #            switch (menuItemName)
        #            {
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolved):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolved(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeProjectMarkAsResolvedRecursive):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Resolved);
        #                case menuitemActionStr(SysUpgradeProjectMarkAsUnresolvedRecursi):
        #                    return SysUpgradeProjectMarkAsResolved::canMarkAsResolvedIncludeSubnodes(this, SysUpgradeConflictManuallyResolved::Unresolved);
        #
        #                case menuitemActionStr(SysUpgradeDetectConflictsRerun):
        #                    return SysUpgradeDetectConflicts::canDetectConflictsRerun(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleAutoResolve):
        #                    return SysUpgradeConflictCodeRuleAutoResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleRevertResolve):
        #                    return SysUpgradeConflictCodeRuleRevertResolve::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareUpgrade):
        #                    return SysUpgradeConflictCodeRuleCompareUpgrade::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(SysUpgradeConflictCodeRuleCompareOrigina):
        #                    return SysUpgradeConflictCodeRuleCompareOrigina::construct().showInContextMenu(this);
        #
        #                case menuitemActionStr(xRefUpdate):
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        !allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysVersionControlUndoCheckOut):
        #                    if (versioncontrol &&
        #                        versioncontrol.parmSysVersionControlSystem() &&
        #                        this.selectionCount() == 1 && firstApplObjectNode &&
        #                        !firstNode.AOTIsOld() &&                            //Does not work for old nodes
        #                        allowEdit)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(xRefUpdateTmpReferences):
        #                    if (!docNode &&
        #                        this.selectionCount() == 1 && firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceReplaceSyntax):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld())                             //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysImpactAnalysis):
        #                    if (!docNode &&
        #                        firstNode.treeNodeType().isRootElement() &&
        #                        !firstNode.AOTIsOld())                               //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysSourceNameWash):
        #                    if (!docNode &&
        #                        firstUtilNode &&
        #                        allowEdit &&
        #                        !firstNode.AOTIsOld() &&
        #                        (_firstType &&
        #                          (_firstType == UtilElementType::Table                 ||
        #                           _firstType == UtilElementType::TableInstanceMethod   ||
        #                           _firstType == UtilElementType::TableStaticMethod     ||
        #                           _firstType == UtilElementType::Macro                 ||
        #                           _firstType == UtilElementType::Class                 ||
        #                           _firstType == UtilElementType::ClassInstanceMethod   ||
        #                           _firstType == UtilElementType::ClassStaticMethod     ||
        #                           _firstType == UtilElementType::Form                  ||
        #                           _firstType == UtilElementType::Report                ||
        #                           _firstType == UtilElementType::ReportTemplate        ||
        #                           _firstType == UtilElementType::ReportSectionTemplate ||
        #                           _firstType == UtilElementType::Query                 ||
        #                           _firstType == UtilElementType::Job                   ||
        #                           _firstType == UtilElementType::WebForm)))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysBPCheck):
        #                    if  (_firstType &&_firstType == UtilElementType::Job)
        #                    {
        #                        return 0;
        #                    }
        #                    if (firstNode.AOTIsOld())
        #                    {
        #                        return 0;
        #                    }
        #                    if (docNode)
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;
        #
        #                case menuitemActionStr(SysSourceReplaceText):
        #                    if (!docNode &&
        #                        allowEdit &&
        #                        this.selectionCount() == 1 &&
        #                        firstUtilNode &&
        #                        !firstNode.AOTIsOld())                            //Does not work for old nodes
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompare):
        #                    if (_firstType == UtilElementType::PrivateProject       ||
        #                        _firstType == UtilElementType::SharedProject)
        #                    {
        #                        return 0;
        #                    }
        #                    if (this.selectionCount() == 2)
        #                    {
        #                        return 1;
        #                    }
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysCompileForward):
        #                    if (this.selectionCount() == 1 &&
        #                        !firstNode.AOTIsOld()      &&                         //Does not work for old nodes
        #                        _firstType==UtilElementType::Class)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(sysTreenodeCopyToCurrentLayer):
        #                    if (firstNode && firstNode.AOTIsOld() && firstNode.treeNodeType().isRootElement())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeApplObjectOpenNewWindow):
        #                    if (!docNode &&
        #                        anyUtilElementTypeSeleced &&
        #                        !firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysTreeNodeOpenNewWindow),
        #                     menuitemActionStr(SysTreeNodeShowProperties):
        #
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    return 1;                                              //also for old
        #
        #                case menuitemActionStr(SysTreeNodeParentOpenNewWindow):
        #                    if (docNode ||
        #                        firstNode.treeNodeType().id() == 27 ||    //Project nodes
        #                        firstNode.treeNodeType().id() == 29 ||
        #                        firstNode.treeNodeType().id() == 30 ||
        #                        firstNode.treeNodeType().id() == 31 )
        #                    {
        #                        return 0;
        #                    }
        #                    if (!firstNode.AOTIsOld())
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Open using in window
        #                case menuitemActionStr(SysOpenNewWindowTable):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowTable::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowExtendedType):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowExtendedType::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowEnum):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowEnum::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowSecurityKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowSecurityKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowConfigurationKey):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowConfigurationKey::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowClass):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowClass::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowForm):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowForm::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowReport):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowReport::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowMenuItem):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowMenuItem::verifyItem(this);
        #                case menuitemActionStr(SysOpenNewWindowFieldGroup):
        #                    return !firstNode.AOTIsOld() && SysOpenNewWindowFieldGroup::verifyItem(this);
        #
        #                // old layer
        #                case menuitemActionStr(sysOpenOldSys):
        #                case menuitemActionStr(sysOpenOldSyp):
        #                case menuitemActionStr(sysOpenOldGls):
        #                case menuitemActionStr(sysOpenOldGlp):
        #                case menuitemActionStr(sysOpenOldFpk):
        #                case menuitemActionStr(sysOpenOldFpp):
        #                case menuitemActionStr(sysOpenOldSln):
        #                case menuitemActionStr(sysOpenOldSlp):
        #                case menuitemActionStr(sysOpenOldIsv):
        #                case menuitemActionStr(sysOpenOldIsp):
        #                case menuitemActionStr(sysOpenOldVar):
        #                case menuitemActionStr(sysOpenOldVap):
        #                case menuitemActionStr(sysOpenOldCus):
        #                case menuitemActionStr(sysOpenOldCup):
        #                case menuitemActionStr(sysOpenOldUsr):
        #                case menuitemActionStr(sysOpenOldUsp):
        #                    utilEntryLevel = str2enum(utilEntryLevel, subStr(menuItemName, strLen(menuItemName)-2, 3));
        #                    if (this.selectionCount() == 1 &&
        #                        oldMask & (1 << utilEntryLevel))
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                // Test jobs
        #                case menuitemActionStr(SysTestToolbarOpen):
        #                    if (this.selectionCount() == 1)
        #                    {
        #                        switch (firstNode.handle())
        #                        {
        #                            case classNum(ProjectNode):
        #                            case classNum(ProjectGroupNode):
        #                                return 1;
        #
        #                            case classNum(ClassNode):
        #                                classNode = firstNode;
        #                                if (classNode &&
        #                                    (SysTestProject::implementsSysTestable(classNode.iD()) ||
        #                                     SysDictClass::isSuperclass(classNode.iD(), classNum(SysTestSuite))))
        #
        #                                {
        #                                    return 1;
        #                                }
        #                                return 0;
        #
        #                            case classNum(MemberFunction):
        #                                parentNode = firstNode.AOTparent();
        #                                if (parentNode &&
        #                                    (parentNode.handle() == classNum(ClassNode) || parentNode is ClassNode) &&
        #                                    SysTestProject::implementsSysTestable(parentNode.applObjectId()))
        #                                {
        #                                    testable = classfactory.createClass(parentNode.applObjectId(), false) as SysTestable;
        #                                    if (testable)
        #                                    {
        #                                        listEnumerator = testable.testMethods().getEnumerator();
        #                                        while (listEnumerator.moveNext())
        #                                        {
        #                                            if (listEnumerator.current() == firstNode.treeNodeName())
        #                                                return 1;
        #                                        }
        #                                    }
        #                                }
        #                                return 0;
        #                        }
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AxdGenerateAxdQuery):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Form     ||
        #                       _firstType == UtilElementType::Report   ||
        #                       _firstType == UtilElementType::WebForm )
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(AifRegisterService):
        #                    if(this.selectionCount() != 1)
        #                        return 0;
        #
        #                    if(_firstType == UtilElementType::Service)
        #                    {
        #                        return 1;
        #                    }
        #                    return 0;
        #
        #                case menuitemActionStr(SysXppILIncrementalBuild):
        #                case menuitemActionStr(SysXppILFullBuild):
        #                    // enable for AOT root node only
        #                    return firstNode.treeNodeType().id() == 1;
        #                case menuitemActionStr(SysSecSecurityApply):
        #                    return SysSecHelper::showApplyChangesContextMenu(firstNode);
        #            }
        #    }
        #//    infolog.mayReloadMenu(true);
        #
        #    if (firstNode.AOTIsOld())
        #        return 0;
        #    return 1;
        #}
        #
      ENDSOURCE
      SOURCE #startedFrom
        #/// <summary>
        #///    Appends a <c>SysContextMenu</c> object to the input <paramref name="_menuFunctionArgs" />
        #///    parameter, unless one is already present.
        #/// </summary>
        #/// <param name="_menuFunctionArgs">
        #///    An instance of the <c>Args</c> class.
        #/// </param>
        #/// <returns>
        #///    true, if the context menu is started from a <c>SysContextMenu</c> (or a descendant class);
        #///    otherwise false.
        #/// </returns>
        #/// <remarks>
        #///    This method inquires whether the input _<paramref name="menuFunctionArgs" /> has an argument named
        #///    <c>parmObject</c>.
        #///    If it does have a <c>parmObject</c>, true is returned if the object referenced
        #///    by <c>parmObject</c> is of type <c>SysContextMenu</c> (or a descendant class).
        #///    If it does not have
        #///    a <c>parmObject</c>, this method appends <c>parmObject</c> with a <c>SysContextMenu</c> object, and
        #///    true is returned.
        #/// </remarks>
        #public static boolean startedFrom(Args _menuFunctionArgs)
        #{
        #    SysContextMenu sysContextMenu;
        #    classId cid1, cid2;
        #
        #    if (!_menuFunctionArgs)
        #        return false;
        #
        #    if (_menuFunctionArgs.parmObject())
        #    {
        #        cid1 = classIdGet(_menuFunctionArgs.parmObject());
        #        cid2 = classIdGet(sysContextMenu);
        #
        #        if (SysDictClass::isEqualOrSuperclass(cid1,cid2))
        #            return true;
        #    }
        #
        #    if (match('sysContextMenu>',_menuFunctionArgs.parm()))
        #    {
        #        sysContextMenu = new SysContextMenuAOT();
        #        _menuFunctionArgs.parmObject(sysContextMenu);
        #        return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #DAXDTable2FormWizard
  PROPERTIES
    Name                #DAXDTable2FormWizard
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #class FormRun extends ObjectRun
      #{
      #    DAXDTable2FormWizard      sysWizard;
      #    DAXDTable2FormTranslation formTranslation;
      #}
      #
    ENDSOURCE
    SOURCE #init
      #void init()
      #{
      #    super();
      #    if (element.Args().caller())
      #    {
      #        sysWizard       = element.Args().caller();
      #        formTranslation = sysWizard.parmFormTranslation(sysWizard.parmTableName());
      #
      #        TableName.text       (sysWizard.parmTableName());
      #        TableDetailName.text (sysWizard.parmTableName());
      #
      #        element.setFields();
      #    }
      #    else
      #    {
      #        DAXDTable2FormWizard::main(new args());
      #        element.closeCancel();
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #run
      #void run()
      #{
      #    element.setTexts();
      #
      #    super();
      #}
      #
    ENDSOURCE
    SOURCE #setFields
      #public void setFields()
      #{
      #    if (TableName.text())
      #    {
      #        //formTranslation = DAXDTable2FormTranslation::construct(TableName.text());
      #
      #        FormName.text(formTranslation.parmFormName());
      #        FormLabel.text(formTranslation.parmFormLabel());
      #        FormStyle.selection(formTranslation.parmFormStyle());
      #    }
      #
      #    if (CreateDetailFormMaster.checked())
      #    {
      #        FormDetailName.enabled  (true);
      #        FormDetailLabel.enabled (true);
      #        FormDetailStyle.enabled (true);
      #
      #        if (!FormDetailName.text())
      #        {
      #            formTranslation.parmFormNameDetail(formTranslation.parmTableName());
      #            FormDetailName.text  (formTranslation.parmFormNameDetail());
      #        }
      #
      #        if (!FormDetailLabel.text())
      #        {
      #            formTranslation.parmFormLabelDetail(formTranslation.parmFormLabel());
      #            FormDetailLabel.text (formTranslation.parmFormLabelDetail());
      #        }
      #
      #        if (FormDetailStyle.selection() == FormStyle::Auto)
      #        {
      #            formTranslation.parmFormStyleDetail(FormStyle::DetailsFormMaster);
      #            FormDetailStyle.selection(FormStyle::DetailsFormMaster);
      #        }
      #    }
      #    else
      #    {
      #        FormDetailName.enabled  (false);
      #        FormDetailLabel.enabled (false);
      #        FormDetailStyle.enabled (false);
      #
      #        FormDetailName.text  ("");
      #        FormDetailLabel.text ("");
      #        FormDetailStyle.selection(FormStyle::Auto);
      #    }
      #}
    ENDSOURCE
    SOURCE #setTexts
      #void setTexts()
      #{
      #    ;
      #    switch (FormStyle.selection())
      #    {
      #        case FormStyle::ListPage:
      #            AlertText1.visible(true);
      #            AlertText2.visible(false);
      #            break;
      #
      #        case FormStyle::DetailsFormTransaction:
      #            AlertText1.visible(false);
      #            AlertText2.visible(true);
      #            break;
      #
      #        default:
      #            AlertText1.visible(false);
      #            AlertText2.visible(false);
      #            break;
      #    }
      #
      #    switch (FormDetailStyle.selection())
      #    {
      #        case FormStyle::DetailsFormTransaction:
      #            AlertDetailText1.visible(true);
      #            break;
      #
      #        default:
      #            AlertDetailText1.visible(false);
      #            break;
      #    }
      #}
      #
    ENDSOURCE
    SOURCE #tab
      #FormTabControl tab()
      #{
      #    return tab;
      #}
      #
    ENDSOURCE
    SOURCE #wizard
      #SysWizard wizard()
      #{
      #    return sysWizard;
      #}
      #
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Width               #Column width
      Height              #Column height
    ENDPROPERTIES
    
    CONTAINER
      CONTROL GROUP
        PROPERTIES
          Name                #FormDetailGrp
          ElementPosition     #1431655764
          HierarchyParent     #Step3
          Caption             #@SYS13403
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #FormGrp
          AutoDeclaration     #Yes
          ElementPosition     #1288490187
          HierarchyParent     #Step2
          Caption             #Form details
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TableDetailGrp
          ElementPosition     #1073741823
          HierarchyParent     #Step3
          Caption             #@SYS40151
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TableGrp
          AutoDeclaration     #Yes
          ElementPosition     #858993458
          HierarchyParent     #Step2
          Caption             #@SYS40151
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TableTransactionGrp
          ElementPosition     #1431655764
          HierarchyParent     #Step4
          Caption             #@SYS40151
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Texts
          ElementPosition     #1717986916
          HierarchyParent     #Step2
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #TextsDetail
          ElementPosition     #1789569705
          HierarchyParent     #Step3
          FrameType           #None
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TAB
        PROPERTIES
          Name                #Tab
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1073741823
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Step1
          Width               #Column width
          Height              #Column height
          HelpText            #This wizard will create a form from a form template base on the choosen table.
          ElementPosition     #613566756
          HierarchyParent     #Tab
          Caption             #Welcome
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Step2
          Width               #Column width
          Height              #Column height
          HelpText            #Setup the properties of main form.
          ElementPosition     #920350134
          HierarchyParent     #Tab
          Caption             #Main form setup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Step3
          Width               #Column width
          Height              #Column height
          HelpText            #Setup the properties of detail master form.
          ElementPosition     #1227133512
          HierarchyParent     #Tab
          Caption             #Details form master setup
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Step4
          Width               #Column width
          Height              #Column height
          HelpText            #Choose the linked data source table name.
          ElementPosition     #1533916890
          HierarchyParent     #Tab
          Caption             #Detail form transaction
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL TABPAGE
        PROPERTIES
          Name                #Step5
          Width               #Column width
          Height              #Column height
          HelpText            #Finish form creation.
          ElementPosition     #1840700268
          HierarchyParent     #Tab
          Caption             #Finish
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #CreateDetailFormMaster
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #Step3
          Label               #Create detail form master
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmCreateDetailFormMaster(this.checked());
            #
            #    element.setFields();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #FormDetailStyle
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #1717986916
          HierarchyParent     #FormDetailGrp
          Label               #@SYS341942
          EnumType            #FormStyle
        ENDPROPERTIES
        
        METHODS
          SOURCE #selectionChange
            #public int selectionChange()
            #{
            #    int ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmFormStyleDetail(this.selection());
            #
            #    element.setTexts();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #FormStyle
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #1717986916
          HierarchyParent     #FormGrp
          Label               #@SYS341942
          EnumType            #FormStyle
        ENDPROPERTIES
        
        METHODS
          SOURCE #selectionChange
            #public int selectionChange()
            #{
            #    int ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmFormStyle(this.selection());
            #
            #    if (formTranslation.parmFormStyle() != FormStyle::ListPage)
            #    {
            #        FormName.text(formTranslation.parmTableName());
            #        formTranslation.parmFormName(FormName.text());
            #    }
            #
            #    element.setTexts();
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #AlertDetailText1
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1431655764
          HierarchyParent     #TextsDetail
          Text                #This form template has a optional linked data source. You can setup the table in the next step.
          ColorScheme         #RGB
          BackStyle           #Opaque
          BackgroundColor     #255 255 128
          ForegroundColor     #20 0 0
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #AlertText1
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1073741822
          HierarchyParent     #Texts
          Text                #This form template has a optional child form. You can setup it in the next step.
          ColorScheme         #RGB
          BackStyle           #Opaque
          BackgroundColor     #255 255 128
          ForegroundColor     #20 0 0
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #AlertText2
          AutoDeclaration     #Yes
          Visible             #No
          ElementPosition     #1610612733
          HierarchyParent     #Texts
          Text                #This form template has a optional linked data source. You can setup the table in the next step.
          ColorScheme         #RGB
          BackStyle           #Opaque
          BackgroundColor     #255 255 128
          ForegroundColor     #20 0 0
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #HelpText1
          HelpText            #This wizard will create a form from a form template base on the choosen table.
          ElementPosition     #858993458
          HierarchyParent     #Step1
          Text                #This wizard will create a form from a form template base on the choosen table.
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #HelpText2
          HelpText            #This wizard belongs to DAX Development Utilities project, where developers share helpful tools to skip the boring part of development.
          ElementPosition     #1288490187
          HierarchyParent     #Step1
          Text                #DAX Development Utilities project. Share and contribute!
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STATICTEXT
        PROPERTIES
          Name                #HelpText3
          HelpText            #https://github.com/anderson-joyle/DAXDUTIL
          ElementPosition     #1717986916
          HierarchyParent     #Step1
          Text                #https://github.com/anderson-joyle/DAXDUTIL
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #FormDetailLabel
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #1288490187
          HierarchyParent     #FormDetailGrp
          Label               #@SYS25058
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmFormLabel(this.text());
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #FormDetailName
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #858993458
          HierarchyParent     #FormDetailGrp
          Label               #@SYS117778
          ExtendedDataType    
            ARRAY 
              #Name
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmFormName(this.text());
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #FormLabel
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #1288490187
          HierarchyParent     #FormGrp
          Label               #@SYS25058
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmFormLabel(this.text());
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #FormName
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #858993458
          HierarchyParent     #FormGrp
          Label               #@SYS117778
          ExtendedDataType    
            ARRAY 
              #Name
              #
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmFormName(this.text());
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TableDetailName
          AutoDeclaration     #Yes
          Width               #200
          Enabled             #No
          ElementPosition     #1431655764
          HierarchyParent     #TableDetailGrp
          Label               #@SYS17421
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TableName
          AutoDeclaration     #Yes
          Width               #200
          Enabled             #No
          ElementPosition     #1431655764
          HierarchyParent     #TableGrp
          Label               #@SYS17421
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #TableTransactionName
          AutoDeclaration     #Yes
          Width               #200
          ElementPosition     #1431655764
          HierarchyParent     #TableTransactionGrp
          Label               #Transaction table name
        ENDPROPERTIES
        
        METHODS
          SOURCE #lookup
            #public void lookup()
            #{
            #    TableId tableId;
            #    ;
            #
            #    tableId = pickTable(false, false, true, false, true);
            #
            #    if (tableId)
            #    {
            #        TableTransactionName.text(tableId2name(tableId));
            #    }
            #}
          ENDSOURCE
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    ;
            #
            #    ret = super();
            #
            #    formTranslation.parmTableTransactionName(this.text());
            #
            #    return ret;
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: MNU

; Microsoft Dynamics AX Menu : SysContextMenu unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #SysContextMenu
    PROPERTIES
      Name                #SysContextMenu
      Label               #@SYS28637
      SecurityKey         #SysDevelopment
      Origin              #{100E0000-0000-1000-FB09-5DBF82A26477}
    ENDPROPERTIES
    
    MENUITEM
      PROPERTIES
        Name                #Compare o código existente à correção proposta
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareUpgrade
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Resolver automaticamente conflito de regra de código-fonte
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleAutoResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Comparar código alterado ao código original
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleCompareOrigina
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Reverter resolução automática de conflito de regra de código-fonte
        MenuItemType        #Action
        MenuItemName        #SysUpgradeConflictCodeRuleRevertResolve
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Marcar como resolvido
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Marcar como não resolvidos
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolved
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Marcar como resolvido (incluindo subnós)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsResolvedRecursive
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Marcar como não resolvido (incluindo subnós)
        MenuItemType        #Action
        MenuItemName        #SysUpgradeProjectMarkAsUnresolvedRecursi
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Executar novamente detecção de conflitos
        MenuItemType        #Action
        MenuItemName        #SysUpgradeDetectConflictsRerun
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS24666
      PROPERTIES
        Name                #MenuxRef
        Label               #@SYS24666
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Usado por
          MenuItemName        #XRefReferencesUsedBy
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Usando (exibição instantânea)
          MenuItemType        #Action
          MenuItemName        #xRefUpdateTmpReferences
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Nomes
          MenuItemName        #XRefNames
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Uso
          MenuItemName        #XRefReferencesUsing
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Atualizar
          MenuItemType        #Action
          MenuItemName        #xRefUpdate
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS310448
      PROPERTIES
        Name                #SecTools
        Label               #@SYS310448
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Analisador de XRef
          MenuItemName        #syssecanalysisaddIn
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Analisador de metadados
          MenuItemName        #syssecanalysisaddInmetadataAnalyzer
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Exibir funções de segurança relacionadas
          MenuItemName        #SysSecObjectsAnalyze
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Exibir objetos de segurança relacionados
          MenuItemName        #SysSecObjectsInRole
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Aplicar alterações
          MenuItemType        #Action
          MenuItemName        #SysSecSecurityApply
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Navegador de tabela
        MenuItemName        #sysTableBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Relatório automático
        MenuItemName        #SysTableForm
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #Engenharia Reversa
        MenuItemName        #SysVisioAddIn
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Extrair documentação XML
        MenuItemType        #Output
        MenuItemName        #SysXmlDocumentationCreateFile
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Executar testes
        MenuItemType        #Action
        MenuItemName        #SysTestToolbarOpen
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Navegador da hierarquia de tipo
        MenuItemName        #SysTypeHierarchyBrowser
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENUITEM
      PROPERTIES
        Name                #New form
        MenuItemName        #DAXDTable2FormWizard
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Comparar
        MenuItemType        #Action
        MenuItemName        #sysCompare
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Compilar avançar
        MenuItemType        #Action
        MenuItemName        #sysCompileForward
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Análise de Impacto
        MenuItemType        #Action
        MenuItemName        #SysImpactAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Localizar e substituir
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceText
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Renomeação sintática
        MenuItemType        #Action
        MenuItemName        #SysSourceReplaceSyntax
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Duplicatas
        MenuItemName        #SysDictIndexShowDuplicates
      ENDPROPERTIES
      
    ENDMENUITEM
    MENU #@SYS16245
      PROPERTIES
        Name                #MenuCopy
        Label               #@SYS16245
        NeededAccessLevel   #NoAccess
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Caminho completo
          MenuItemType        #Action
          MenuItemName        #SysTreeNodePathCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Nome
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeNameCopyToClipboard
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Copiar para a camada atual
          MenuItemType        #Action
          MenuItemName        #systreenodecopyToCurrentLayer
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Verificar Práticas Recomendadas
        MenuItemType        #Action
        MenuItemName        #SysBPCheck
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Verificar práticas recomendadas de estilo do formulário
        MenuItemName        #SysBPStyleCheckAnalysis
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Atualização da capitalização de título do código-fonte
        MenuItemType        #Action
        MenuItemName        #SysSourceNameWash
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Gerar consulta Axd
        MenuItemType        #Action
        MenuItemName        #AxdGenerateAxdQuery
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Assistente do Serviço de Documento AIF
        MenuItemName        #AxdWizard
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Registrar serviço
        MenuItemType        #Action
        MenuItemName        #AifRegisterService
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Propriedades de ajuda
        MenuItemName        #HelpTopicID
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Buscar em Pesquisa de Problemas
        MenuItemName        #SysLcsIssueSearchAotItem
      ENDPROPERTIES
      
    ENDMENUITEM
    SEPARATOR
    MENU #@SYS53405
      PROPERTIES
        Name                #SysContextMenuOpenNewWindow
        Label               #@SYS53405
        SetCompany          #Yes
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Abrir janela de objetos do aplicativo
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeApplObjectOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir Pai na janela
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeParentOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir nova janela
          MenuItemType        #Action
          MenuItemName        #SysTreeNodeOpenNewWindow
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS57839
        PROPERTIES
          Name                #MenuOpenOldLayer
          Label               #@SYS57839
          NeededAccessLevel   #NoAccess
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #usp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #usr
            MenuItemType        #Action
            MenuItemName        #SysOpenOldUsr
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cup
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #cus
            MenuItemType        #Action
            MenuItemName        #SysOpenOldCus
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #vap
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVap
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #var
            MenuItemType        #Action
            MenuItemName        #SysOpenOldVar
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #isv
            MenuItemType        #Action
            MenuItemName        #SysOpenOldIsv
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #slp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sln
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSln
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #fpk
            MenuItemType        #Action
            MenuItemName        #SysOpenOldFpk
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #glp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGlp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #gls
            MenuItemType        #Action
            MenuItemName        #SysOpenOldGls
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #syp
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSyp
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #sys
            MenuItemType        #Action
            MenuItemName        #SysOpenOldSys
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Abrir tabela usada
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowTable
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir grupo de campos de tabela utilizado
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowFieldGroup
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir o Tipo de Dados Estendido
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowExtendedType
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir o Enum utilizado
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowEnum
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir a classe utilizada
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowClass
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir o formulário utilizado
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowForm
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir o Relatório utilizado
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowReport
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Abrir o item de menu utilizado
          MenuItemType        #Action
          MenuItemName        #SysOpenNewWindowMenuItem
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENUITEM
      PROPERTIES
        Name                #Propriedades
        MenuItemType        #Action
        MenuItemName        #SysTreeNodeShowProperties
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Geração CIL completa de X++
        MenuItemType        #Action
        MenuItemName        #SysXppILFullBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Geração CIL incremental de X++
        MenuItemType        #Action
        MenuItemName        #SysXppILIncrementalBuild
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Assistente de aprovação…
        MenuItemName        #WorkflowAOTWizardApproval
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Assistente da tarefas…
        MenuItemName        #WorkflowAOTWizardTask
      ENDPROPERTIES
      
    ENDMENUITEM
    MENUITEM
      PROPERTIES
        Name                #Assistente de tipo de fluxo de trabalho...
        MenuItemName        #WorkflowAOTWizardType
      ENDPROPERTIES
      
    ENDMENUITEM
  ENDMENU
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : DAXDTable2FormWizard unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #DAXDTable2FormWizard
    Type: 1
    PROPERTIES
      Name                #DAXDTable2FormWizard
      Label               #New form
      ObjectType          #Class
      Object              #DAXDTable2FormWizard
      Origin              #{D7B430CD-FF20-45AB-BA87-32AE3DF76897}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: JOB

; Microsoft Dynamics AX Job: Table2Form descarregado
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #Table2Form
    #static void Table2Form(Args _args)
    #{
    #    DAXDTable2FormCreate      formCreate;
    #    DAXDTable2FormTranslation formTranslation;
    #
    #    Dialog  dlg = new Dialog("Create form from table");
    #    DialogField dlgField = dlg.addField(extendedTypeStr(Name),"Table name");
    #
    #    DictTable dictTable;
    #    ;
    #
    #    if (dlg.run())
    #    {
    #        dictTable = new dictTable(tableName2id(dlgField.value()));
    #        if (dictTable)
    #        {
    #            formTranslation = DAXDTable2FormTranslation::construct(dictTable.name());
    #
    #            formCreate = DAXDTable2FormCreate::construct(formTranslation);
    #            formCreate.create();
    #        }
    #        else
    #        {
    #            throw error("The table does not exists.");
    #        }
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{C39ED997-A420-4EAF-BA07-854803E0D536}
  ENDPROPERTIES
  

***Element: PRN

; Microsoft Dynamics AX Project : DAXD_Table2Form unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #DAXD_Table2Form
  PRIVATE
  PROPERTIES
    Name                #DAXD_Table2Form
    Origin              #{96600B0C-6FA6-43D7-BA83-2FF3D0EAD138}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Test_Tables
      PROPERTIES
        Name                #Test_Tables
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 105228
        NODETYPE 204
        NAME #TSTMainTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 105229
        NODETYPE 204
        NAME #TSTSimpleListTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 105230
        NODETYPE 204
        NAME #TSTTransactionTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 105224
        NODETYPE 204
        NAME #TSTTableOfContentTable
      ENDNODE
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027005
        NODETYPE 329
        NAME #DAXDTable2FormCreate
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027008
        NODETYPE 329
        NAME #DAXDTable2FormCreate_Auto
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027011
        NODETYPE 329
        NAME #DAXDTable2FormCreate_ListPage
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027012
        NODETYPE 329
        NAME #DAXDTable2FormCreate_DetailsFormMaster
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027014
        NODETYPE 329
        NAME #DAXDTable2FormCreate_DetailsFormTransact
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027010
        NODETYPE 329
        NAME #DAXDTable2FormCreate_SimpleList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027009
        NODETYPE 329
        NAME #DAXDTable2FormCreate_SimpleListDetails
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027007
        NODETYPE 329
        NAME #DAXDTable2FormCreate_TableOfContent
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027006
        NODETYPE 329
        NAME #DAXDTable2FormUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027004
        NODETYPE 329
        NAME #DAXDTable2FormTranslation
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1027013
        NODETYPE 329
        NAME #DAXDTable2FormWizard
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 968
        NODETYPE 329
        NAME #SysContextMenu
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #DAXDTable2FormWizard
      ENDNODE
      ENDGROUP
      
    GROUP #Menus
      PROPERTIES
        Name                #Menus
        ProjectGroupType    #Menus
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #SysContextMenu
      ENDNODE
      ENDGROUP
      
    GROUP #MenuItems
      PROPERTIES
        Name                #MenuItems
        ProjectGroupType    #MenuItems
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      GROUP #Display
        PROPERTIES
          Name                #Display
          ProjectGroupType    #Display
          GroupMask           #
          PreventEditProperties #No
        ENDPROPERTIES
        
        BEGINNODE
          FILETYPE 0
          UTILTYPE 1
          UTILOBJECTID 0
          NODETYPE 296
          NAME #DAXDTable2FormWizard
        ENDNODE
        ENDGROUP
        
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #Jobs
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #Table2Form
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
